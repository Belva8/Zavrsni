1. MainActivity
Purpose: This activity serves as the main entry point of the application. It provides buttons to navigate to different functionalities of the pedometer app.
Components:
navigateToStepCounterActivity(): Navigates to the Step Counter Activity.
navigateToStepHistoryActivity(): Navigates to the Step History Activity.
navigateToCustomAlgoActivity(): Navigates to the Custom Algorithm Results Activity.
2. ListAdapter
Purpose: This class is a custom adapter for populating a list view with data.
Components:
mStepCountList: ArrayList containing DateStepsModel objects.
getView(): Inflates a layout for each item in the list view and populates it with data from the ArrayList.
3. StepsCounterActivity
Purpose: Represents the step counter functionality of the app.
Components:
onCreate(): Initializes the activity.
Navigation functions to other activities.
4. StepsHistoryActivity
Purpose: Displays the history of steps taken on different dates.
Components:
onCreate(): Initializes the activity.
Retrieves step count data from the database and populates a list view using the ListAdapter.
5. StepsService
Purpose: A service responsible for detecting steps using the device's step detector sensor.
Components:
onCreate(): Initializes the service and registers the step detector sensor.
onStartCommand(): Returns START_STICKY to keep the service running in the background.
onSensorChanged(): Detects step events and updates the database.
6. StepsTrackerDBHelper
Purpose: Manages the SQLite database operations for storing step count data.
Components:
onCreate(): Creates the database table if it doesn't exist.
onUpgrade(): Drops and recreates the table when upgrading the database schema.
createStepsEntry(): Inserts or updates step count data into the database.
readStepsEntries(): Reads step count data from the database.
7. StepsTrackerService
Purpose: Another service responsible for processing accelerometer data to detect steps and store them in the database.
Components:
StepDetectorListener: Listens for step detector sensor events and triggers accelerometer data processing.
AccelerometerListener: Listens for accelerometer sensor events and collects data.
ProcessDataTask: Processes accelerometer data to detect steps and stores them in the database.
8. CustomAlgoResultsActivity
Purpose: Displays the results of step count analysis using a custom algorithm.
Components:
onCreate(): Initializes the activity and calculates various metrics based on step count data.
9. AccelerometerData
Purpose: Represents individual accelerometer data points.
Components:
Properties for storing accelerometer values and a timestamp.
10. DateStepsModel
Purpose: Represents date-step count pairs.
Components:
Properties for storing date and step count.
This pedometer app combines sensor data processing, SQLite database management, and user interface components to provide step tracking functionality. Users can view their step count history, analyze step count data, and use custom algorithms for step detection. The project demonstrates the integration of various Android components to create a functional application for tracking physical activity.